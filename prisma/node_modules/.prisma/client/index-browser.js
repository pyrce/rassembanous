
Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal
} = require('@prisma/client/runtime/index-browser')


const Prisma = {}

exports.Prisma = Prisma

/**
 * Prisma Client JS version: 3.11.0
 * Query Engine version: b371888aaf8f51357c7457d836b86d12da91658b
 */
Prisma.prismaVersion = {
  client: "3.11.0",
  engine: "b371888aaf8f51357c7457d836b86d12da91658b"
}

Prisma.PrismaClientKnownRequestError = () => {
  throw new Error(`PrismaClientKnownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  throw new Error(`PrismaClientUnknownRequestError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientRustPanicError = () => {
  throw new Error(`PrismaClientRustPanicError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientInitializationError = () => {
  throw new Error(`PrismaClientInitializationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.PrismaClientValidationError = () => {
  throw new Error(`PrismaClientValidationError is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  throw new Error(`sqltag is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.empty = () => {
  throw new Error(`empty is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.join = () => {
  throw new Error(`join is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.raw = () => {
  throw new Error(`raw is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
)}
Prisma.validator = () => (val) => val

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = 'DbNull'
Prisma.JsonNull = 'JsonNull'
Prisma.AnyNull = 'AnyNull'

/**
 * Enums
 */
// Based on
// https://github.com/microsoft/TypeScript/issues/3192#issuecomment-261720275
function makeEnum(x) { return x; }

exports.Prisma.RolesScalarFieldEnum = makeEnum({
  id: 'id',
  role: 'role'
});

exports.Prisma.UsersScalarFieldEnum = makeEnum({
  id: 'id',
  nom: 'nom',
  prenom: 'prenom',
  login: 'login',
  password: 'password',
  adresse: 'adresse',
  email: 'email',
  token: 'token',
  id_role: 'id_role'
});

exports.Prisma.LieuScalarFieldEnum = makeEnum({
  id: 'id',
  nomLieu: 'nomLieu',
  adresse: 'adresse'
});

exports.Prisma.CategoriesScalarFieldEnum = makeEnum({
  id: 'id',
  categorie: 'categorie'
});

exports.Prisma.EvenementsScalarFieldEnum = makeEnum({
  id: 'id',
  nom: 'nom',
  description: 'description',
  id_lieu: 'id_lieu',
  id_categorie: 'id_categorie',
  dateDebut: 'dateDebut',
  dateFin: 'dateFin',
  dateLimit: 'dateLimit',
  nbPlace: 'nbPlace',
  prix: 'prix',
  isPublic: 'isPublic'
});

exports.Prisma.Event_partenaireScalarFieldEnum = makeEnum({
  id: 'id',
  id_event: 'id_event',
  id_partenaire: 'id_partenaire'
});

exports.Prisma.Partenaire_userScalarFieldEnum = makeEnum({
  id: 'id',
  id_partenaire: 'id_partenaire',
  id_user: 'id_user'
});

exports.Prisma.MediatypeScalarFieldEnum = makeEnum({
  id: 'id',
  libelle: 'libelle'
});

exports.Prisma.MediaScalarFieldEnum = makeEnum({
  id: 'id',
  image: 'image',
  id_event: 'id_event',
  id_user: 'id_user',
  id_type: 'id_type'
});

exports.Prisma.SortOrder = makeEnum({
  asc: 'asc',
  desc: 'desc'
});


exports.Prisma.ModelName = makeEnum({
  Roles: 'Roles',
  Users: 'Users',
  Lieu: 'Lieu',
  Categories: 'Categories',
  evenements: 'evenements',
  event_partenaire: 'event_partenaire',
  partenaire_user: 'partenaire_user',
  mediatype: 'mediatype',
  media: 'media'
});

/**
 * Create the Client
 */
class PrismaClient {
  constructor() {
    throw new Error(
      `PrismaClient is unable to be run in the browser.
In case this error is unexpected for you, please report it in https://github.com/prisma/prisma/issues`,
    )
  }
}
exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
